Pro Data_Building   ,   All_data    ,  file_path   ,   name_temp , columns , title , frame_to_omega
    compare_times =   Size(All_data[0,0,*], /N_ELEMENTS)
    star          =   1/frame_to_omega * 300
    end_          =   1/frame_to_omega * 400
    title         =   STRMID(title,16,100);除去title前面的time    
    average       =   dblarr(columns,compare_times+1)
    Maxium        =   dblarr(columns,compare_times+1)
    Minium        =   dblarr(columns,compare_times+1)
    mean_data     =   mean(All_data, Dimension =3 )
          
    for i = 0 ,   columns-1  do begin     
        average[i,0]     = mean(mean_data[i,star:end_])
        Maxium[i,0]      =  max(mean_data[i,star:end_])
        Minium[i,0]      =  min(mean_data[i,star:end_])
        for j=1 , compare_times  do begin
            average[i,j]     = mean(All_data[i,star:end_,j-1])
            Maxium[i,j]      =  max(All_data[i,star:end_,j-1])
            Minium[i,j]      =  min(All_data[i,star:end_,j-1])
        endfor
    endfor
    analysis_path =   file_path + '\Kappa_with_error_bar_' + name_temp + '.txt'
    openw       ,   data_building1   ,   analysis_path , /get_lun , width=400
        
        printf      ,   data_building1   ,      'Average  ' + title
        printf      ,   data_building1   ,      'mean     ' , average[*,0]
        printf      ,   data_building1   ,      'Max      ' , Maxium[*,0]
        printf      ,   data_building1   ,      'Min      ' , Minium[*,0]
        for j=1 , compare_times  do begin
            printf      ,   data_building1   ,      'Compare' + STRTRIM(string(j),2) + title
            printf      ,   data_building1   ,      'mean     ' , average[*,j]
            printf      ,   data_building1   ,      'Max      ' , Maxium[*,j]
            printf      ,   data_building1   ,      'Min      ' , Minium[*,j]
          endfor
      
    free_lun    ,   data_building1
End